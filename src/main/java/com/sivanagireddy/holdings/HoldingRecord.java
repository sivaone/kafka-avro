/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sivanagireddy.holdings;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for a real estate property. */
@org.apache.avro.specific.AvroGenerated
public class HoldingRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2828879310177228847L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HoldingRecord\",\"namespace\":\"com.sivanagireddy.holdings\",\"doc\":\"Schema for a real estate property.\",\"fields\":[{\"name\":\"holdingId\",\"type\":\"long\",\"doc\":\"The unique id of a holding.\"},{\"name\":\"type\",\"type\":\"string\",\"doc\":\"The type of holding.\"},{\"name\":\"value\",\"type\":\"double\",\"doc\":\"The value of the property.\"},{\"name\":\"address\",\"type\":\"string\",\"doc\":\"The address of the property.\"},{\"name\":\"createdDate\",\"type\":\"long\",\"doc\":\"The date when property is added.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HoldingRecord> ENCODER =
      new BinaryMessageEncoder<HoldingRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HoldingRecord> DECODER =
      new BinaryMessageDecoder<HoldingRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<HoldingRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<HoldingRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<HoldingRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HoldingRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this HoldingRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a HoldingRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a HoldingRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static HoldingRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique id of a holding. */
  private long holdingId;
  /** The type of holding. */
  private java.lang.CharSequence type;
  /** The value of the property. */
  private double value;
  /** The address of the property. */
  private java.lang.CharSequence address;
  /** The date when property is added. */
  private long createdDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HoldingRecord() {}

  /**
   * All-args constructor.
   * @param holdingId The unique id of a holding.
   * @param type The type of holding.
   * @param value The value of the property.
   * @param address The address of the property.
   * @param createdDate The date when property is added.
   */
  public HoldingRecord(java.lang.Long holdingId, java.lang.CharSequence type, java.lang.Double value, java.lang.CharSequence address, java.lang.Long createdDate) {
    this.holdingId = holdingId;
    this.type = type;
    this.value = value;
    this.address = address;
    this.createdDate = createdDate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return holdingId;
    case 1: return type;
    case 2: return value;
    case 3: return address;
    case 4: return createdDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: holdingId = (java.lang.Long)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: value = (java.lang.Double)value$; break;
    case 3: address = (java.lang.CharSequence)value$; break;
    case 4: createdDate = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'holdingId' field.
   * @return The unique id of a holding.
   */
  public long getHoldingId() {
    return holdingId;
  }


  /**
   * Sets the value of the 'holdingId' field.
   * The unique id of a holding.
   * @param value the value to set.
   */
  public void setHoldingId(long value) {
    this.holdingId = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of holding.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * The type of holding.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the property.
   */
  public double getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * The value of the property.
   * @param value the value to set.
   */
  public void setValue(double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The address of the property.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * The address of the property.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'createdDate' field.
   * @return The date when property is added.
   */
  public long getCreatedDate() {
    return createdDate;
  }


  /**
   * Sets the value of the 'createdDate' field.
   * The date when property is added.
   * @param value the value to set.
   */
  public void setCreatedDate(long value) {
    this.createdDate = value;
  }

  /**
   * Creates a new HoldingRecord RecordBuilder.
   * @return A new HoldingRecord RecordBuilder
   */
  public static com.sivanagireddy.holdings.HoldingRecord.Builder newBuilder() {
    return new com.sivanagireddy.holdings.HoldingRecord.Builder();
  }

  /**
   * Creates a new HoldingRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HoldingRecord RecordBuilder
   */
  public static com.sivanagireddy.holdings.HoldingRecord.Builder newBuilder(com.sivanagireddy.holdings.HoldingRecord.Builder other) {
    if (other == null) {
      return new com.sivanagireddy.holdings.HoldingRecord.Builder();
    } else {
      return new com.sivanagireddy.holdings.HoldingRecord.Builder(other);
    }
  }

  /**
   * Creates a new HoldingRecord RecordBuilder by copying an existing HoldingRecord instance.
   * @param other The existing instance to copy.
   * @return A new HoldingRecord RecordBuilder
   */
  public static com.sivanagireddy.holdings.HoldingRecord.Builder newBuilder(com.sivanagireddy.holdings.HoldingRecord other) {
    if (other == null) {
      return new com.sivanagireddy.holdings.HoldingRecord.Builder();
    } else {
      return new com.sivanagireddy.holdings.HoldingRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for HoldingRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HoldingRecord>
    implements org.apache.avro.data.RecordBuilder<HoldingRecord> {

    /** The unique id of a holding. */
    private long holdingId;
    /** The type of holding. */
    private java.lang.CharSequence type;
    /** The value of the property. */
    private double value;
    /** The address of the property. */
    private java.lang.CharSequence address;
    /** The date when property is added. */
    private long createdDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sivanagireddy.holdings.HoldingRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.holdingId)) {
        this.holdingId = data().deepCopy(fields()[0].schema(), other.holdingId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[4].schema(), other.createdDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing HoldingRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sivanagireddy.holdings.HoldingRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.holdingId)) {
        this.holdingId = data().deepCopy(fields()[0].schema(), other.holdingId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[4].schema(), other.createdDate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'holdingId' field.
      * The unique id of a holding.
      * @return The value.
      */
    public long getHoldingId() {
      return holdingId;
    }


    /**
      * Sets the value of the 'holdingId' field.
      * The unique id of a holding.
      * @param value The value of 'holdingId'.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder setHoldingId(long value) {
      validate(fields()[0], value);
      this.holdingId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'holdingId' field has been set.
      * The unique id of a holding.
      * @return True if the 'holdingId' field has been set, false otherwise.
      */
    public boolean hasHoldingId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'holdingId' field.
      * The unique id of a holding.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder clearHoldingId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of holding.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * The type of holding.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of holding.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of holding.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * The value of the property.
      * @return The value.
      */
    public double getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * The value of the property.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder setValue(double value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * The value of the property.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * The value of the property.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder clearValue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * The address of the property.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * The address of the property.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.address = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * The address of the property.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'address' field.
      * The address of the property.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder clearAddress() {
      address = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdDate' field.
      * The date when property is added.
      * @return The value.
      */
    public long getCreatedDate() {
      return createdDate;
    }


    /**
      * Sets the value of the 'createdDate' field.
      * The date when property is added.
      * @param value The value of 'createdDate'.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder setCreatedDate(long value) {
      validate(fields()[4], value);
      this.createdDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdDate' field has been set.
      * The date when property is added.
      * @return True if the 'createdDate' field has been set, false otherwise.
      */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdDate' field.
      * The date when property is added.
      * @return This builder.
      */
    public com.sivanagireddy.holdings.HoldingRecord.Builder clearCreatedDate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HoldingRecord build() {
      try {
        HoldingRecord record = new HoldingRecord();
        record.holdingId = fieldSetFlags()[0] ? this.holdingId : (java.lang.Long) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.Double) defaultValue(fields()[2]);
        record.address = fieldSetFlags()[3] ? this.address : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.createdDate = fieldSetFlags()[4] ? this.createdDate : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HoldingRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<HoldingRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HoldingRecord>
    READER$ = (org.apache.avro.io.DatumReader<HoldingRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.holdingId);

    out.writeString(this.type);

    out.writeDouble(this.value);

    out.writeString(this.address);

    out.writeLong(this.createdDate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.holdingId = in.readLong();

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.value = in.readDouble();

      this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);

      this.createdDate = in.readLong();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.holdingId = in.readLong();
          break;

        case 1:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 2:
          this.value = in.readDouble();
          break;

        case 3:
          this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
          break;

        case 4:
          this.createdDate = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










